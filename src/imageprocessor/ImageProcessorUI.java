/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageprocessor;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Vittorio
 */
public class ImageProcessorUI extends javax.swing.JFrame {

    private ImageProcessor imageProcessor;

    /**
     * Creates new form ImageProcessorUI
     */
    public ImageProcessorUI() {
        initComponents();
        componentsEnabledAtImageOpened = new JComponent[]{btnPictureBW, btnPictureOriginal, btnAnalysisStart};
        componentsEnabledAtImageAnalysed = new JComponent[]{btnPictureReal, btnPictureImaginary, btnPictureAmplitude, mnSaveAmplitude, mnSaveImaginary, mnSaveReal, txtLowerThreshold, txtUpperThreshold};
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgRenderingType = new javax.swing.ButtonGroup();
        btnOpen = new javax.swing.JButton();
        lblURL = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        btnPictureOriginal = new javax.swing.JButton();
        btnPictureBW = new javax.swing.JButton();
        btnPictureReal = new javax.swing.JButton();
        btnPictureImaginary = new javax.swing.JButton();
        btnPictureAmplitude = new javax.swing.JButton();
        btnAnalysisStart = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jSeparator1 = new javax.swing.JSeparator();
        txtLowerThreshold = new javax.swing.JTextField();
        txtUpperThreshold = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnOpen = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnSave = new javax.swing.JMenu();
        mnSaveOriginal = new javax.swing.JMenuItem();
        mnSaveBW = new javax.swing.JMenuItem();
        mnSaveReal = new javax.swing.JMenuItem();
        mnSaveImaginary = new javax.swing.JMenuItem();
        mnSaveAmplitude = new javax.swing.JMenuItem();
        mnExport = new javax.swing.JMenu();
        mnCsv = new javax.swing.JMenu();
        mnCsvAmplitude = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Greyscale = new javax.swing.JMenu();
        mnRenderingRaw = new javax.swing.JRadioButtonMenuItem();
        mnRenderingHeatmap = new javax.swing.JRadioButtonMenuItem();
        mnRenderingFullSpectrum = new javax.swing.JRadioButtonMenuItem();
        mnRenderingGreyscale = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fourier Image Processor");
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnOpen.setText("Open...");
        btnOpen.setPreferredSize(new java.awt.Dimension(90, 32));
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnOpen, gridBagConstraints);

        lblURL.setText("Chose Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(lblURL, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(lblImage, gridBagConstraints);

        btnPictureOriginal.setText("Original");
        btnPictureOriginal.setEnabled(false);
        btnPictureOriginal.setPreferredSize(new java.awt.Dimension(90, 32));
        btnPictureOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureOriginalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnPictureOriginal, gridBagConstraints);

        btnPictureBW.setText("B&W");
        btnPictureBW.setEnabled(false);
        btnPictureBW.setPreferredSize(new java.awt.Dimension(90, 32));
        btnPictureBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureBWActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnPictureBW, gridBagConstraints);

        btnPictureReal.setText("Real");
        btnPictureReal.setEnabled(false);
        btnPictureReal.setPreferredSize(new java.awt.Dimension(90, 32));
        btnPictureReal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureRealActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnPictureReal, gridBagConstraints);

        btnPictureImaginary.setText("Imaginary");
        btnPictureImaginary.setEnabled(false);
        btnPictureImaginary.setPreferredSize(new java.awt.Dimension(90, 32));
        btnPictureImaginary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureImaginaryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnPictureImaginary, gridBagConstraints);

        btnPictureAmplitude.setText("Amplitude");
        btnPictureAmplitude.setEnabled(false);
        btnPictureAmplitude.setPreferredSize(new java.awt.Dimension(90, 32));
        btnPictureAmplitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureAmplitudeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(btnPictureAmplitude, gridBagConstraints);

        btnAnalysisStart.setText("Image Analysis");
        btnAnalysisStart.setEnabled(false);
        btnAnalysisStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalysisStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.insets = new java.awt.Insets(0, 36, 0, 36);
        getContentPane().add(btnAnalysisStart, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(32, 0, 0, 0);
        getContentPane().add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        getContentPane().add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jSeparator1, gridBagConstraints);

        txtLowerThreshold.setText("0");
        txtLowerThreshold.setEnabled(false);
        txtLowerThreshold.setPreferredSize(new java.awt.Dimension(45, 32));
        txtLowerThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLowerThresholdActionPerformed(evt);
            }
        });
        txtLowerThreshold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLowerThresholdKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        getContentPane().add(txtLowerThreshold, gridBagConstraints);

        txtUpperThreshold.setText("-1");
        txtUpperThreshold.setEnabled(false);
        txtUpperThreshold.setPreferredSize(new java.awt.Dimension(45, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        getContentPane().add(txtUpperThreshold, gridBagConstraints);

        jMenu1.setText("File");

        mnOpen.setText("Open...");
        mnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnOpen);
        jMenu1.add(jSeparator3);

        mnSave.setText("Save");

        mnSaveOriginal.setText("Original");
        mnSaveOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveOriginalActionPerformed(evt);
            }
        });
        mnSave.add(mnSaveOriginal);

        mnSaveBW.setText("Black And White");
        mnSaveBW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveBWActionPerformed(evt);
            }
        });
        mnSave.add(mnSaveBW);

        mnSaveReal.setText("Real");
        mnSaveReal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveRealActionPerformed(evt);
            }
        });
        mnSave.add(mnSaveReal);

        mnSaveImaginary.setText("Imaginary");
        mnSaveImaginary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveImaginaryActionPerformed(evt);
            }
        });
        mnSave.add(mnSaveImaginary);

        mnSaveAmplitude.setText("Amplitude");
        mnSaveAmplitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveAmplitudeActionPerformed(evt);
            }
        });
        mnSave.add(mnSaveAmplitude);

        jMenu1.add(mnSave);

        mnExport.setText("Export");

        mnCsv.setText("CSV");

        mnCsvAmplitude.setText("Amplitude");
        mnCsvAmplitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnCsvAmplitudeActionPerformed(evt);
            }
        });
        mnCsv.add(mnCsvAmplitude);

        mnExport.add(mnCsv);

        jMenu1.add(mnExport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        Greyscale.setText("Rendering");

        bgRenderingType.add(mnRenderingRaw);
        mnRenderingRaw.setSelected(true);
        mnRenderingRaw.setText("Raw");
        Greyscale.add(mnRenderingRaw);

        bgRenderingType.add(mnRenderingHeatmap);
        mnRenderingHeatmap.setText("Heatmap");
        Greyscale.add(mnRenderingHeatmap);

        bgRenderingType.add(mnRenderingFullSpectrum);
        mnRenderingFullSpectrum.setText("Full Spectrum");
        Greyscale.add(mnRenderingFullSpectrum);

        bgRenderingType.add(mnRenderingGreyscale);
        mnRenderingGreyscale.setText("Greyscale");
        Greyscale.add(mnRenderingGreyscale);

        jMenuBar1.add(Greyscale);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        choosePicture();
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnPictureOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureOriginalActionPerformed
        displayImage(imageProcessor.getImageOriginal());
    }//GEN-LAST:event_btnPictureOriginalActionPerformed

    private void btnPictureRealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureRealActionPerformed
        displayImage(imageProcessor.getImageReal());
    }//GEN-LAST:event_btnPictureRealActionPerformed

    private void btnPictureBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureBWActionPerformed
        displayImage(imageProcessor.getImageGreyscale());
    }//GEN-LAST:event_btnPictureBWActionPerformed

    private void btnAnalysisStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalysisStartActionPerformed
        imageProcessor.launchAnalysis();

        double speed;

        try {
            speed = imageProcessor.getIterationsFft() / imageProcessor.getAnalysisTime() * 1000;
        } catch (Exception e) {
            speed = 0;
        }

        JOptionPane.showMessageDialog(rootPane, "Analysis Complete!\n"
                + imageProcessor.getAnalysisTime() + "ms\n"
                + imageProcessor.getIterationsFft() + " iterations\n"
                + speed + "i/s",
                "Analysis Complete",
                JOptionPane.INFORMATION_MESSAGE);

        for (JComponent component : componentsEnabledAtImageAnalysed) {
            component.setEnabled(true);
        }

    }//GEN-LAST:event_btnAnalysisStartActionPerformed

    private void btnPictureImaginaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureImaginaryActionPerformed
        displayImage(imageProcessor.getImageImaginary());
    }//GEN-LAST:event_btnPictureImaginaryActionPerformed

    private void btnPictureAmplitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureAmplitudeActionPerformed
        displayImage(imageProcessor.getImageAmplitude());
    }//GEN-LAST:event_btnPictureAmplitudeActionPerformed

    private void mnSaveOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveOriginalActionPerformed
        saveImage(imageProcessor.getImageOriginal());
    }//GEN-LAST:event_mnSaveOriginalActionPerformed

    private void mnSaveBWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveBWActionPerformed
        saveImage(imageProcessor.getImageGreyscale());
    }//GEN-LAST:event_mnSaveBWActionPerformed

    private void mnSaveAmplitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveAmplitudeActionPerformed
        saveImage(imageProcessor.getImageAmplitude());
    }//GEN-LAST:event_mnSaveAmplitudeActionPerformed

    private void mnSaveRealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveRealActionPerformed
        saveImage(imageProcessor.getImageReal());
    }//GEN-LAST:event_mnSaveRealActionPerformed

    private void mnSaveImaginaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveImaginaryActionPerformed
        saveImage(imageProcessor.getImageImaginary());
    }//GEN-LAST:event_mnSaveImaginaryActionPerformed

    private void mnCsvAmplitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnCsvAmplitudeActionPerformed
        try {
            ProcessorPixelMap.exportCsv("export.csv", imageProcessor.getValuesAmplitude());
        } catch (IOException ex) {
            Logger.getLogger(ImageProcessorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnCsvAmplitudeActionPerformed

    private void txtLowerThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLowerThresholdActionPerformed
        try {
            int threshold = Integer.valueOf(txtLowerThreshold.getText());

            imageProcessor.setThreshold(threshold);

            imageProcessor.updateRenderedImages();

            displayImage(imageProcessor.getImageReal());
        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(rootPane, "Invalid threshold.", "Error", JOptionPane.ERROR_MESSAGE);
            txtLowerThreshold.setText(String.valueOf(imageProcessor.getThreshold()));
        }
    }//GEN-LAST:event_txtLowerThresholdActionPerformed

    private void txtLowerThresholdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLowerThresholdKeyTyped

    }//GEN-LAST:event_txtLowerThresholdKeyTyped

    private void mnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnOpenActionPerformed
        choosePicture();
    }//GEN-LAST:event_mnOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageProcessorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageProcessorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageProcessorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageProcessorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ImageProcessorUI().setVisible(true);
        });
    }

    void choosePicture() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));

        int result = fileChooser.showOpenDialog(rootPane);

        if (result == JFileChooser.APPROVE_OPTION) {
            //FileChooser used to allow the user to select desired file
        }

        File image = fileChooser.getSelectedFile();

        if (image == null) { // no image selected
            return;
        }

        lblURL.setText(image.toString());

        try {
            imageProcessor = new ImageProcessor(ImageIO.read(image));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Something went wrong.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ImageProcessorUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (JComponent component : componentsEnabledAtImageOpened) {
            component.setEnabled(true);
        }
        
        for (JComponent component : componentsEnabledAtImageAnalysed) {
            component.setEnabled(false);
        }

        displayImage(imageProcessor.getImageGreyscale());

    }

    void displayImage(ProcessorImage image) {
        ImageIcon icon = new ImageIcon(image.getMaxScaledInstance(300));

        lblImage.setIcon(icon);

        this.pack();
    }

    void saveImage(ProcessorImage image) {
        File file = new File("image.png");

        try {
            ImageIO.write(image, "png", file);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred while exporting the image.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ImageProcessorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Greyscale;
    private javax.swing.ButtonGroup bgRenderingType;
    private javax.swing.JButton btnAnalysisStart;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPictureAmplitude;
    private javax.swing.JButton btnPictureBW;
    private javax.swing.JButton btnPictureImaginary;
    private javax.swing.JButton btnPictureOriginal;
    private javax.swing.JButton btnPictureReal;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblURL;
    private javax.swing.JMenu mnCsv;
    private javax.swing.JMenuItem mnCsvAmplitude;
    private javax.swing.JMenu mnExport;
    private javax.swing.JMenuItem mnOpen;
    private javax.swing.JRadioButtonMenuItem mnRenderingFullSpectrum;
    private javax.swing.JRadioButtonMenuItem mnRenderingGreyscale;
    private javax.swing.JRadioButtonMenuItem mnRenderingHeatmap;
    private javax.swing.JRadioButtonMenuItem mnRenderingRaw;
    private javax.swing.JMenu mnSave;
    private javax.swing.JMenuItem mnSaveAmplitude;
    private javax.swing.JMenuItem mnSaveBW;
    private javax.swing.JMenuItem mnSaveImaginary;
    private javax.swing.JMenuItem mnSaveOriginal;
    private javax.swing.JMenuItem mnSaveReal;
    private javax.swing.JTextField txtLowerThreshold;
    private javax.swing.JTextField txtUpperThreshold;
    // End of variables declaration//GEN-END:variables

    JComponent[] componentsEnabledAtImageOpened;

    JComponent[] componentsEnabledAtImageAnalysed;
}
